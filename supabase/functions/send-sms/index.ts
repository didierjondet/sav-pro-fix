import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.52.1';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

Deno.serve(async (req) => {

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;
const supabase = createClient(supabaseUrl, supabaseServiceKey);

const accountSid = Deno.env.get('ACCOUNT_SID');
const authToken = Deno.env.get('AUTH_TOKEN');
const twilioPhoneNumber = Deno.env.get('TWILIO_PHONE_NUMBER');

interface SMSRequest {
  shopId: string;
  toNumber: string;
  message: string;
  type: 'sav_notification' | 'quote_notification' | 'manual' | 'status_change';
  recordId?: string;
}

function formatPhoneNumber(phoneNumber: string): string {
  console.log('üì± Formatage num√©ro - Input:', phoneNumber);
  
  // Nettoie le num√©ro (supprime espaces, tirets, etc.)
  let cleaned = phoneNumber.replace(/[\s\-\(\)\.]/g, '');
  console.log('üì± Apr√®s nettoyage:', cleaned, 'longueur:', cleaned.length);
  
  // Si le num√©ro commence par 0 et fait 10 chiffres (format fran√ßais standard)
  if (cleaned.startsWith('0') && cleaned.length === 10) {
    const formatted = '+33' + cleaned.substring(1);
    console.log('üì± Format fran√ßais standard d√©tect√©, r√©sultat:', formatted);
    return formatted;
  }
  
  // Si le num√©ro commence par 0 et fait 11 chiffres (cas avec chiffre en trop)
  if (cleaned.startsWith('0') && cleaned.length === 11) {
    // V√©rifier si c'est un mobile fran√ßais (06, 07)
    if (cleaned.startsWith('06') || cleaned.startsWith('07')) {
      // Prendre les 10 premiers chiffres et convertir
      const truncated = cleaned.substring(0, 10);
      const formatted = '+33' + truncated.substring(1);
      console.log('üì± Format fran√ßais 11 chiffres (mobile) d√©tect√©, tronqu√© et converti:', formatted);
      return formatted;
    } else {
      // Pour les autres pr√©fixes (01, 02, 03, 04, 05, 08, 09)
      const formatted = '+33' + cleaned.substring(1, 10);
      console.log('üì± Format fran√ßais 11 chiffres (fixe) d√©tect√©, tronqu√© et converti:', formatted);
      return formatted;
    }
  }
  
  // Si le num√©ro commence d√©j√† par +33
  if (cleaned.startsWith('+33')) {
    console.log('üì± D√©j√† au format +33, r√©sultat:', cleaned);
    return cleaned;
  }
  
  // Si le num√©ro commence par 33 sans le +
  if (cleaned.startsWith('33') && cleaned.length === 11) {
    const formatted = '+' + cleaned;
    console.log('üì± Format 33 sans +, r√©sultat:', formatted);
    return formatted;
  }
  
  // Pour les autres formats, ajouter + si manquant
  const formatted = cleaned.startsWith('+') ? cleaned : '+' + cleaned;
  console.log('üì± Autre format, r√©sultat:', formatted);
  return formatted;
}

async function sendTwilioSMS(to: string, body: string): Promise<any> {
  const url = `https://api.twilio.com/2010-04-01/Accounts/${accountSid}/Messages.json`;
  
  console.log('üîê Tentative d\'envoi SMS avec:', {
    url: url,
    accountSid: accountSid ? `${accountSid.substring(0, 8)}...` : 'MANQUANT',
    authToken: authToken ? `${authToken.substring(0, 8)}...` : 'MANQUANT',
    from: twilioPhoneNumber,
    to: to
  });
  
  const params = new URLSearchParams();
  params.append('To', to);
  params.append('From', twilioPhoneNumber!);
  params.append('Body', body);

  const authHeader = `Basic ${btoa(`${accountSid}:${authToken}`)}`;
  console.log('üîê En-t√™te d\'autorisation g√©n√©r√©:', authHeader.substring(0, 20) + '...');

  const response = await fetch(url, {
    method: 'POST',
    headers: {
      'Authorization': authHeader,
      'Content-Type': 'application/x-www-form-urlencoded',
    },
    body: params,
  });

  console.log('üì° R√©ponse Twilio - Status:', response.status, 'OK:', response.ok);

  if (!response.ok) {
    const errorText = await response.text();
    console.error('‚ùå R√©ponse d\'erreur Twilio compl√®te:', errorText);
    throw new Error(`Twilio API error: ${response.status} - ${errorText}`);
  }

  return await response.json();
}

async function checkSMSCredits(shopId: string): Promise<{allowed: boolean, reason?: string, action?: string}> {
  // V√©rifier les cr√©dits SMS de la boutique avec plan + packages SMS
  const { data: shop, error } = await supabase
    .from('shops')
    .select('sms_credits_allocated, subscription_forced, monthly_sms_used, custom_sms_limit, purchased_sms_credits, admin_added_sms_credits')
    .eq('id', shopId)
    .single();

  if (error) {
    console.error('Erreur lors de la v√©rification des cr√©dits:', error);
    return { allowed: false, reason: 'Erreur technique' };
  }

  // Si l'abonnement est forc√©, autoriser l'envoi
  if (shop.subscription_forced) {
    console.log('‚úÖ Abonnement forc√© - envoi autoris√©');
    return { allowed: true };
  }

  // 1. V√©rifier d'abord les cr√©dits du plan mensuel
  const monthlyLimit = shop.custom_sms_limit || shop.sms_credits_allocated || 0;
  const monthlyUsed = shop.monthly_sms_used || 0;
  const monthlyAvailable = Math.max(0, monthlyLimit - monthlyUsed);
  
  if (monthlyAvailable > 0) {
    console.log(`‚úÖ Cr√©dits plan disponibles: ${monthlyAvailable} (${monthlyUsed}/${monthlyLimit})`);
    return { allowed: true };
  }
  
  // 2. Si plus de cr√©dits du plan, v√©rifier les SMS achet√©s + admin
  const { data: packages, error: packagesError } = await supabase
    .from('sms_package_purchases')
    .select('sms_count')
    .eq('shop_id', shopId)
    .eq('status', 'completed');

  if (packagesError) {
    console.error('Erreur lors de la r√©cup√©ration des packages SMS:', packagesError);
  }

  const totalPackagesSMS = packages?.reduce((total, pkg) => total + pkg.sms_count, 0) || 0;
  const adminAddedSMS = shop.admin_added_sms_credits || 0;
  const totalPurchasedAndAdmin = totalPackagesSMS + adminAddedSMS;
  const usedPurchasedSMS = shop.purchased_sms_credits || 0;
  const availablePurchasedSMS = Math.max(0, totalPurchasedAndAdmin - usedPurchasedSMS);
  
  console.log(`V√©rification SMS d√©taill√©e:
    - Plan mensuel: ${monthlyUsed}/${monthlyLimit} (disponible: ${monthlyAvailable})
    - Packages achet√©s: ${totalPackagesSMS}
    - Admin ajout√©s: ${adminAddedSMS}  
    - Total achet√©+admin: ${totalPurchasedAndAdmin}
    - Utilis√©s achet√©+admin: ${usedPurchasedSMS}
    - Disponible achet√©+admin: ${availablePurchasedSMS}`);
  
  if (availablePurchasedSMS > 0) {
    console.log(`‚úÖ Cr√©dits achet√©s/admin disponibles: ${availablePurchasedSMS}`);
    return { allowed: true };
  }
  
  // Aucun cr√©dit disponible - proposer d'acheter un pack
  return { 
    allowed: false, 
    reason: 'Cr√©dits SMS √©puis√©s', 
    action: 'buy_sms_package' 
  };
}

async function updateSMSCredits(shopId: string): Promise<void> {
  try {
    console.log('üí≥ D√âBUT D√âCOMPTE SMS pour shop:', shopId);
    
    // R√©cup√©rer les donn√©es actuelles du shop
    const { data: shop, error: shopError } = await supabase
      .from('shops')
      .select('monthly_sms_used, sms_credits_allocated, purchased_sms_credits, custom_sms_limit, admin_added_sms_credits')
      .eq('id', shopId)
      .single();

    if (shopError) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des donn√©es shop:', shopError);
      throw new Error(`Erreur r√©cup√©ration shop: ${shopError.message}`);
    }

    if (!shop) {
      console.error('‚ùå Shop non trouv√© pour ID:', shopId);
      throw new Error('Shop non trouv√©');
    }

    console.log('üìä Donn√©es shop actuelles:', {
      monthly_sms_used: shop.monthly_sms_used,
      sms_credits_allocated: shop.sms_credits_allocated,
      purchased_sms_credits: shop.purchased_sms_credits,
      custom_sms_limit: shop.custom_sms_limit,
      admin_added_sms_credits: shop.admin_added_sms_credits
    });

    // Limite mensuelle
    const monthlyLimit = shop.custom_sms_limit || shop.sms_credits_allocated || 0;
    const monthlyUsed = shop.monthly_sms_used || 0;

    console.log('üí° Logique de d√©compte - Plan mensuel:', {
      monthlyUsed,
      monthlyLimit,
      hasMonthlyCredits: monthlyUsed < monthlyLimit
    });

    // PRIORIT√â 1: Utiliser d'abord les SMS mensuels
    if (monthlyUsed < monthlyLimit) {
      console.log('üì± D√©bit des cr√©dits du plan mensuel');
      const newMonthlyUsed = monthlyUsed + 1;
      
      const { error: updateError } = await supabase
        .from('shops')
        .update({ 
          monthly_sms_used: newMonthlyUsed
        })
        .eq('id', shopId);

      if (updateError) {
        console.error('‚ùå Erreur mise √† jour monthly_sms_used:', updateError);
        throw new Error(`Erreur d√©compte mensuel: ${updateError.message}`);
      }

      console.log(`‚úÖ Cr√©dits mensuels mis √† jour: ${monthlyUsed} -> ${newMonthlyUsed}`);
      return;
    }

    // PRIORIT√â 2: Si plus de cr√©dits du plan, utiliser les SMS achet√©s/admin
    console.log('üì¶ D√©bit des cr√©dits achet√©s/admin (plan √©puis√©)');
    const newPurchasedUsed = (shop.purchased_sms_credits || 0) + 1;
    
    const { error: updatePurchasedError } = await supabase
      .from('shops')
      .update({ 
        purchased_sms_credits: newPurchasedUsed
      })
      .eq('id', shopId);

    if (updatePurchasedError) {
      console.error('‚ùå Erreur mise √† jour purchased_sms_credits:', updatePurchasedError);
      throw new Error(`Erreur d√©compte achet√©s: ${updatePurchasedError.message}`);
    }

    console.log(`‚úÖ Cr√©dits achet√©s/admin mis √† jour: ${shop.purchased_sms_credits || 0} -> ${newPurchasedUsed}`);
    console.log('üí≥ D√âCOMPTE SMS TERMIN√â AVEC SUCC√àS');
    
  } catch (error) {
    console.error('üí• ERREUR CRITIQUE DANS updateSMSCredits:', error);
    throw error; // Propager l'erreur pour que l'appelant puisse la g√©rer
  }
}

async function logSMSHistory(request: SMSRequest, status: string): Promise<void> {
  await supabase
    .from('sms_history')
    .insert({
      shop_id: request.shopId,
      to_number: request.toNumber,
      message: request.message,
      type: request.type,
      record_id: request.recordId,
      status: status
    });
}

async function addSMSToSAVChat(request: SMSRequest, messageSid: string): Promise<void> {
  // Ajouter l'envoi SMS dans le chat du SAV si c'est li√© √† un dossier SAV (pas pour les devis)
  if (request.recordId && (request.type === 'sav_notification' || request.type === 'manual' || request.type === 'status_change')) {
    try {
      // V√©rifier si c'est un dossier SAV
      const { data: savCase } = await supabase
        .from('sav_cases')
        .select('id, case_number')
        .eq('id', request.recordId)
        .single();

      if (savCase) {
        // Formater le message pour le chat avec style SMS
        const chatMessage = `üì± SMS envoy√© au ${formatPhoneNumberForDisplay(request.toNumber)}\n\n"${request.message}"\n\n‚úÖ Message ID: ${messageSid}`;
        
        // Obtenir le nom de la boutique pour le sender
        const { data: shop } = await supabase
          .from('shops')
          .select('name')
          .eq('id', request.shopId)
          .single();

        const shopName = shop?.name || 'Boutique';
        
        // Ajouter le message dans le chat SAV
        await supabase
          .from('sav_messages')
          .insert({
            sav_case_id: request.recordId,
            shop_id: request.shopId,
            sender_type: 'shop',
            sender_name: `üì± SMS - ${shopName}`,
            message: chatMessage,
            read_by_shop: true,
            read_by_client: false
          });

        console.log(`Message SMS ajout√© au chat du dossier SAV ${savCase.case_number}`);
      }
    } catch (error) {
      console.error('Erreur lors de l\'ajout du SMS au chat SAV:', error);
      // Ne pas faire √©chouer l'envoi SMS pour une erreur de chat
    }
  }
}

function formatPhoneNumberForDisplay(phoneNumber: string): string {
  // Masquer partiellement le num√©ro pour la s√©curit√©
  if (phoneNumber.length > 6) {
    return phoneNumber.substring(0, 3) + '***' + phoneNumber.substring(phoneNumber.length - 2);
  }
  return phoneNumber;
}

serve(async (req) => {
  console.log('=== DEBUT FONCTION SEND-SMS ===');
  
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    console.log('1. V√©rification configuration Twilio...');
    console.log('Variables d\'environnement Twilio:', {
      accountSid: accountSid ? `${accountSid.substring(0, 8)}...` : 'MANQUANT',
      authToken: authToken ? `${authToken.substring(0, 8)}...` : 'MANQUANT',
      twilioPhoneNumber: twilioPhoneNumber || 'MANQUANT'
    });
    
    if (!accountSid || !authToken || !twilioPhoneNumber) {
      console.error('‚ùå Configuration Twilio manquante:', { 
        accountSid: !!accountSid, 
        authToken: !!authToken, 
        twilioPhoneNumber: !!twilioPhoneNumber 
      });
      throw new Error('Configuration Twilio manquante');
    }
    console.log('‚úÖ Configuration Twilio OK');

    console.log('2. Parsing de la requ√™te...');
    const smsRequest: SMSRequest = await req.json();
    console.log('‚úÖ Requ√™te pars√©e:', smsRequest);
    
    console.log('3. V√©rification des cr√©dits SMS...');
    const creditsCheck = await checkSMSCredits(smsRequest.shopId);
    if (!creditsCheck.allowed) {
      console.error('‚ùå Cr√©dits SMS insuffisants:', creditsCheck.reason);
      await logSMSHistory(smsRequest, 'failed_no_credits');
      return new Response(
        JSON.stringify({ 
          success: false, 
          error: creditsCheck.reason || 'Cr√©dits SMS insuffisants',
          action: creditsCheck.action
        }),
        {
          status: 400,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        }
      );
    }
    console.log('‚úÖ Cr√©dits SMS OK');

    console.log('4. Formatage du num√©ro...');
    const formattedNumber = formatPhoneNumber(smsRequest.toNumber);
    console.log(`‚úÖ Num√©ro format√©: ${smsRequest.toNumber} -> ${formattedNumber}`);

    console.log('5. Envoi SMS via Twilio...');
    const twilioResponse = await sendTwilioSMS(formattedNumber, smsRequest.message);
    console.log('‚úÖ R√©ponse Twilio:', twilioResponse);

    if (twilioResponse.sid) {
      console.log('6. Mise √† jour des cr√©dits...');
      try {
        await updateSMSCredits(smsRequest.shopId);
        console.log('‚úÖ Cr√©dits mis √† jour avec succ√®s');
      } catch (creditsError) {
        console.error('‚ùå ERREUR lors de la mise √† jour des cr√©dits:', creditsError);
        // Log l'erreur mais continuer - le SMS a d√©j√† √©t√© envoy√©
        await logSMSHistory({ ...smsRequest, type: 'error_credits' }, 'sent_credits_error');
      }
      
      console.log('7. Log de l\'historique...');
      await logSMSHistory(smsRequest, 'sent');
      console.log('‚úÖ Historique logg√©');

      console.log('8. Ajout au chat SAV (si applicable)...');
      await addSMSToSAVChat(smsRequest, twilioResponse.sid);
      console.log('‚úÖ Chat SAV trait√©');

      console.log('=== SMS ENVOY√â AVEC SUCC√àS ===');
      return new Response(
        JSON.stringify({ 
          success: true, 
          messageSid: twilioResponse.sid,
          message: 'SMS envoy√© avec succ√®s'
        }),
        {
          headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        }
      );
    } else {
      console.error('‚ùå Pas de SID dans la r√©ponse Twilio');
      await logSMSHistory(smsRequest, 'failed');
      throw new Error('Erreur lors de l\'envoi du SMS');
    }

  } catch (error: any) {
    console.error('üí• ERREUR DANS SEND-SMS:', error);
    console.error('Stack trace:', error.stack);
    
    return new Response(
      JSON.stringify({ 
        success: false, 
        error: error.message 
      }),
      {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    );
  }
});